(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Rows' object has no attribute 'author'"
p3
sS'layer'
p4
S'/home/sourav/Documents/Project_OJ/Redefined/applications/oj/controllers/admin.py'
p5
sS'code'
p6
S'# submitted by aakash\ndef add_problem() : ##bandaria pass the contest id as argument\n    contest=db.contests(request.args(0,cast=int))\n    if not auth.is_logged_in() :\n        redirect(URL(\'admin\',\'login_error\'))\n    if contest.author != auth.user_id :\n        redirect(URL(\'admin\',\'login_error\'))\n    if request.vars :\n        # print "its fine"\n        print request.vars\n\n        form=db.problems.validate_and_insert(contest_id=contest.id,name=request.vars[\'name\'],statement=request.vars[\'statement\'],\n                                        sample_input=request.vars[\'sample_input\'],sample_output=request.vars[\'sample_output\'],\n                                        think=request.vars[\'think\'],code=request.vars[\'code\'],level=request.vars[\'level\'],dp=request.vars[\'dp\'],\n                                        graph=request.vars[\'graph\'],\n                                        computational_geometry=request.vars[\'computational_geometry\'],\n                                        greedy=request.vars[\'greedy\'],\n                                        search=request.vars[\'search\'],\n                                        network_flow=request.vars[\'network_flow\'],\n                                        heuristic=request.vars[\'heuristic\'],\n                                        maths=request.vars[\'maths\'],\n                                        string=request.vars[\'string\'],\n                                        adhoc=request.vars[\'adhoc\'],\n                                        ds=request.vars[\'ds\']\n                                        )\n        if form.errors :\n            session.flash="Form not filled right.!! Plz try again "\n            redirect(URL(\'add_problem\'))\n        # print "its fine 2"\n        image_index=1\n        image_subname=\'uploadimage\'\n        image_name=\'uploadimage0\'\n        while request.vars[image_name]!=None :\n            # print image_name\n            form2=db.problem_image.validate_and_insert(pid=form.id,file=request.vars[image_name])\n            image_name = image_subname + str(image_index)\n            image_index += 1\n        redirect(URL(\'add_testcase\',args=form.id))\n    return dict()\n\n\ndef add_testcase():\n    # if request.function != "add_problem" :\n        # redirect(URL(\'admin\',\'login_error\'))\n    problem=db.problems(request.args(0,cast=int)) or redirect(URL(\'add_problem\'))\n    contest = db(db.contests.id == problem.contest_id).select()\n    if not auth.is_logged_in() :\n        redirect(URL(\'admin\',\'login_error\'))\n    if contest[0].author != auth.user_id :\n        redirect(URL(\'admin\',\'login_error\'))\n\n    no = len(db(db.testcases.pid == problem.id).select())\n    no += 1\n    if request.vars :\n        # print request.vars\n        form=db.testcases.validate_and_insert(pid=problem.id,score=request.vars[\'score\'],in_file=request.vars[\'in_file\'],out_file=request.vars[\'out_file\'],\n                                        time_limit=request.vars[\'time_limit\'],memory_limit=request.vars[\'memory_limit\'])\n        if form.errors :\n            session.flash = "Form not filled right.!!Plz try again"\n            redirect(URL(\'add_testcase\',args=problem.id))\n        if request.vars.add_next !=None :\n            redirect(URL(\'add_testcase\',args=problem.id))\n        else :\n            total=0\n            for testcase in db(db.testcases.pid == problem.id).select() :\n                total += testcase.score\n            if total != 100 :\n                session.flash="Total sum unequal to 100,Please edit"\n                redirect(URL(\'edit_testcases\',args=problem.id))\n        redirect(URL(\'edit_testcases\',args=problem.id)) #bandaria change redirect to where the setter should go after he has added the testcases\n    return dict(testcase_number=no)\ndef edit_problems():\n    problem = db.problems(request.args(0,cast=int))  ##need to add from where this controler is being called\n    contest = db(db.contests.id == problem.contest_id).select()\n    if not auth.is_logged_in() :\n        redirect(URL(\'admin\',\'login_error\'))\n    if contest.author != auth.user_id :\n        redirect(URL(\'admin\',\'login_error\'))\n    # images =[ image for image in db(db.problem_image.pid == problem.id).select() ]\n    images = db(db.problem_image.pid == problem.id).select()\n    if request.vars :\n        # print "its here"\n        # print request.vars\n        if problem.name == request.vars[\'name\'] :\n            form = db(db.problems.id == problem.id).validate_and_update(statement=request.vars[\'statement\'],\n                                        sample_input=request.vars[\'sample_input\'],sample_output=request.vars[\'sample_output\'],\n                                        think=request.vars[\'think\'],code=request.vars[\'code\'],level=request.vars[\'level\'],dp=request.vars[\'dp\'],\n                                        graph=request.vars[\'graph\'],\n                                        computational_geometry=request.vars[\'computational_geometry\'],\n                                        greedy=request.vars[\'greedy\'],\n                                        search=request.vars[\'search\'],\n                                        network_flow=request.vars[\'network_flow\'],\n                                        heuristic=request.vars[\'heuristic\'],\n                                        maths=request.vars[\'maths\'],\n                                        string=request.vars[\'string\'],\n                                        adhoc=request.vars[\'adhoc\'],\n                                        ds=request.vars[\'ds\']\n                                        )\n            if form.errors :\n                session.flash = "Form not filled right.!! Plz try again"\n                redirect(URL(\'edit_problems\',args=problem.id))\n        else :\n            form = db(db.problems.id == problem.id).validate_and_update(name=request.vars[\'name\'],statement=request.vars[\'statement\'],\n                                        sample_input=request.vars[\'sample_input\'],sample_output=request.vars[\'sample_output\'],\n                                        think=request.vars[\'think\'],code=request.vars[\'code\'],level=request.vars[\'level\'],dp=request.vars[\'dp\'],\n                                        graph=request.vars[\'graph\'],\n                                        computational_geometry=request.vars[\'computational_geometry\'],\n                                        greedy=request.vars[\'greedy\'],\n                                        search=request.vars[\'search\'],\n                                        network_flow=request.vars[\'network_flow\'],\n                                        heuristic=request.vars[\'heuristic\'],\n                                        maths=request.vars[\'maths\'],\n                                        string=request.vars[\'string\'],\n                                        adhoc=request.vars[\'adhoc\'],\n                                        ds=request.vars[\'ds\']\n                                        )\n            if form.errors :\n                session.flash = "Form not filled right.!! Plz try again"\n                redirect(URL(\'edit_problems\',args=problem.id))\n\n        subname="deletebox"\n        c=0\n        for image in images :\n            name=subname + str(c)\n            c = c + 1\n            if request.vars[name] == "1" :\n                db(db.problem_image.id == image.id ).delete()\n\n        image_index=1\n        image_subname=\'uploadimage\'\n        image_name=\'uploadimage0\'\n        while request.vars[image_name]!=None :\n            form2=db.problem_image.validate_and_insert(pid=problem.id,file=request.vars[image_name])\n            image_name = image_subname + str(image_index)\n            image_index += 1\n\n        redirect(URL(\'edit_problems\',args=problem.id))\n    return dict(problem=problem,images=images)\n\ndef edit_testcases() :\n    problem = db.problems(request.args(0,cast=int))  ##need to add from where this controler is being called\n    contest = db(db.contests.id == problem.contest_id).select()\n    if not auth.is_logged_in() :\n        redirect(URL(\'admin\',\'login_error\'))\n    if contest.author != auth.user_id :\n        redirect(URL(\'admin\',\'login_error\'))\n    testcases = [testcase for testcase in db(db.testcases.pid == problem.id).select()]\n    if request.vars :\n        print request.vars\n        c=1\n        subname="test"\n        for testcase in testcases :\n            name = subname + str(c)\n            c += 1\n            if request.vars[name] == "1" :\n                db(db.testcases.id == testcase.id).delete()\n        if request.vars.add_more != None :\n            redirect(URL(\'add_testcase\',args=problem.id))\n        else :\n            redirect(URL(\'edit_testcases\',args=problem.id))\n    total=0\n    for testcase in testcases :\n        total += testcase.score\n    if total != 100 :\n        response.flash="Total sum unequal to 100,Please edit"\n    return dict(testcases=testcases)\n\ndef edit_testcase() :\n    if request.function != "edit_testcases" :\n        redirect(URL(\'admin\',\'login_error\'))\n    testcase = db.testcases(request.args(0,cast=int))\n    problem = db(db.problems.id == testcase.pid).select()\n    contest = db(db.contests.id == problem.contest_id).select()\n    if not auth.is_logged_in() :\n        redirect(URL(\'admin\',\'login_error\'))\n    if contest.author != auth.user_id :\n        redirect(URL(\'admin\',\'login_error\'))\n    if request.vars :\n        form=db(db.testcases.id==testcase.id).validate_and_update(score=request.vars[\'score\'],in_file=request.vars[\'in_file\'],out_file=request.vars[\'out_file\'],\n                                        time_limit=request.vars[\'time_limit\'],memory_limit=request.vars[\'memory_limit\'])\n        if form.errors :\n            session.flash = "Form not filled right.!!Plz try again"\n            redirect(URL(\'edit_testcase\',args=testcase.id))\n        redirect(URL(\'edit_testcases\',args=testcase.pid))\n    return dict(testcase=testcase)\ndef login_error() :\n    return dict()\n\nresponse._vars=response._caller(edit_testcases)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/sourav/Documents/Project_OJ/Redefined/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/sourav/Documents/Project_OJ/Redefined/applications/oj/controllers/admin.py", line 189, in <module>\n  File "/home/sourav/Documents/Project_OJ/Redefined/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/sourav/Documents/Project_OJ/Redefined/applications/oj/controllers/admin.py", line 145, in edit_testcases\n    if contest.author != auth.user_id :\nAttributeError: \'Rows\' object has no attribute \'author\'\n'
p11
s.