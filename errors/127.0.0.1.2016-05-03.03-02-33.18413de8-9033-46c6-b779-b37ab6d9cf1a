(dp1
S'output'
p2
S"<type 'exceptions.UnboundLocalError'> local variable 'page' referenced before assignment"
p3
sS'layer'
p4
S'/home/sourav/Documents/Project_OJ/Redefined/applications/oj/controllers/discuss.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\ndef discuss_main():\n    if len(request.args): page=int(request.args[0])\n    else:\n        page=0\n    items_per_page=10\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n\n##    if show_recent==1:\n    order=request.vars.order\n    if(order==1):\n        rows=db(db.post_question).select(orderby=(db.post_question.pub_date),limitby=limitby)\n    else:\n        rows=db(db.post_question).select(orderby=~(db.post_question.number_likes),limitby=limitby)\n##    rows_viewed=db(db.post_question).select(orderby=~(db.post_question.number_likes - db.post_question.number_unlikes),limitby=limitby)\n    return dict(rows=rows,page=page,items_per_page=items_per_page)\n\n\n\ndef discuss_show():\n    post_question=db.post_question(request.vars.pid) or redirect(URL(\'error\'))\n    pido=request.vars.pid\n    like = db(db.likes.page_id == pido).select()\n    no_likes = len(like)\n    if len(request.vars(page)): page=int(request.vars.page)\n    else: page=0\n    items_per_page=9\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    comment=db(db.comments.problem_id==pido).select(orderby=~(db.comments.number_likes),limitby=limitby)\n    """t=db.comments\n    rec = t(request.args(0))\n    t.number_likes.readable = t.number_likes.writable = False\n    t.number_unlikes.readable = t.number_unlikes.writable = False\n    t.problem_id.readable = t.problem_id.writable = False\n    form=SQLFORM(t,rec).process()"""\n    if request.vars.comment_text :\n        # print "its fine"\n        # print request.vars\n\n        form=db.comments.validate_and_insert(problem_id=pido,comment_text=request.vars[\'comment_text\'])\n        # print form.id\n        if form.errors :\n            session.flash="Comment not posted, please comment again"\n        redirect(URL(\'discuss_show\',vars=dict(pid=pido,page=page)))\n\n    """form=SQLFORM(db.comments).process()"""\n    if post_question.problem_id :\n        problem=db(db.problems.name==post_question.problem_id).select()\n        return dict(post_question=post_question,likes=no_likes,comment=comment,page=page,items_per_page=items_per_page,problem=problem)\n    else:\n        return dict(post_question=post_question,likes=no_likes,comment=comment,page=page,items_per_page=items_per_page,problem=None)\n\n@auth.requires_login()\ndef ask_question():\n    if request.vars:\n        if request.vars.problem:\n            problem=request.vars.problem\n            row=db(db.problems.name==problem).select()\n            if len(row)==0:\n                response.flash="This problem is not in database"\n                return dict()\n            form=db.post_question.insert(title=request.vars.title,description=request.vars.description,problem_id=row[0].name)\n        else:\n            form=db.post_question.insert(title=request.vars.title,description=request.vars.description)\n        redirect(URL(\'discuss\',\'discuss_main\',vars=dict(order=1)))\n    return dict()\n\n@auth.requires_login()\ndef add_like() :\n    this_page = db.comments[request.vars.ids]\n    already_likedd=(db.likes_comment.created_by == auth.user.id) & (db.likes_comment.page_id == this_page.id )\n    if db(already_likedd).delete():\n        response.flash = "Unliked"\n    else:\n        ret = db.likes_comment.validate_and_insert(created_by=auth.user.id,page_id=this_page.id)\n        response.flash = "Liked"\n    like = db(db.likes_comment.page_id == this_page.id).select()\n    return str(len(like))\n\n@auth.requires_login()\ndef add_likep() :\n    this_page = db.post_question[request.vars.idss]\n    already_liked=(db.likes.created_by == auth.user.id) & (db.likes.page_id == this_page.id )\n    if db(already_liked).delete():\n        response.flash = "Unliked"\n    else:\n        ret = db.likes.validate_and_insert(created_by=auth.user.id,page_id=this_page.id)\n        response.flash = "Liked"\n    like = db(db.likes.page_id == this_page.id).select()\n    return str(len(like))\n\ndef problem_input():\n    return dict()\n\ndef problem_selector():\n    if not request.vars.problem:\n        return \'\'\n    pattern = request.vars.problem.capitalize() + \'%\'\n    selected = [row.name for row in db(db.problems.name.like(pattern)).select()]\n    return \'\'.join([DIV(k,\n                 _onclick="jQuery(\'#problem\').val(\'%s\')" % k,\n                 _onmouseover="this.style.backgroundColor=\'yellow\'",\n                 _onmouseout="this.style.backgroundColor=\'white\'"\n                 ).xml() for k in selected])\n\nresponse._vars=response._caller(discuss_show)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/sourav/Documents/Project_OJ/Redefined/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/sourav/Documents/Project_OJ/Redefined/applications/oj/controllers/discuss.py", line 107, in <module>\n  File "/home/sourav/Documents/Project_OJ/Redefined/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/sourav/Documents/Project_OJ/Redefined/applications/oj/controllers/discuss.py", line 26, in discuss_show\n    if len(request.vars(page)): page=int(request.vars.page)\nUnboundLocalError: local variable \'page\' referenced before assignment\n'
p11
s.